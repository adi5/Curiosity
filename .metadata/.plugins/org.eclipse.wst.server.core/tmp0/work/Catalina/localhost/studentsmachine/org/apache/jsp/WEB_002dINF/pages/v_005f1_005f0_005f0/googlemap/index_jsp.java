/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2016-05-09 10:11:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.pages.v_005f1_005f0_005f0.googlemap;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/media/shiv/68F0AC0BF0ABDD96/WorkStation-Zone/Ubuntu/Curiosity/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/studentsmachine/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153365282000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-3.0.5.RELEASE.jar", Long.valueOf(1460277405000L));
    _jspx_dependants.put("jar:file:/media/shiv/68F0AC0BF0ABDD96/WorkStation-Zone/Ubuntu/Curiosity/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/studentsmachine/WEB-INF/lib/spring-webmvc-3.0.5.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1287571886000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1460277532000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- /* ************************************\n");
      out.write(" *\n");
      out.write(" * @update:  RITESH SINGH, 29 March 2016\n");
      out.write(" * @Section: Global\n");
      out.write(" * @auth0r:  RITESH SINGH\n");
      out.write(" * @version: v.1.0.0, 26 March 2016\n");
      out.write("************************************* */\n");
      out.write(" -->\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("\t\n");
      out.write("\t<!-- Head of page -->\n");
      out.write("\t<head>\n");
      out.write("\t\t<title>StudentMachine+</title>\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../../helpers/material-lite-loader.jsp", out, false);
      out.write("</head>\n");
      out.write("\t\n");
      out.write("\t<style>\n");
      out.write("\t<!-- Square card -->\n");
      out.write("\t\t.demo-card-square.mdl-card {\n");
      out.write("\t\t  width: 320px;\n");
      out.write("\t\t  height: 320px;\n");
      out.write("\t\t}\n");
      out.write("\t\t.demo-card-square > .mdl-card__title {\n");
      out.write("\t\t  color: #fff;\n");
      out.write("\t\t  background:\n");
      out.write("\t\t    url('resources/m-lite-image/lion1.jpg') bottom right 0% no-repeat #46B6AC;\n");
      out.write("\t\t}\n");
      out.write("\t\t\n");
      out.write("\t\t#myMap {\n");
      out.write("\t\t   height: 350px;\n");
      out.write("\t\t   width: 680px;\n");
      out.write("\t\t}\n");
      out.write("\t</style>\n");
      out.write("\t<script src=\"https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false\"></script>\n");
      out.write("\t    \n");
      out.write("\t<!-- body of page --><!-- #D5DBDB -->\n");
      out.write("\t<body style=\"background-color:#7B7D7D;\"> \n");
      out.write("\t\t<div class=\"demo-layout-waterfall mdl-layout mdl-js-layout\">\n");
      out.write("<!-- =============================My Page Header & Left-drawer======================================================= -->\t\t\n");
      out.write("\t\t\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../../helpers/header.jsp", out, false);
      out.write("<!-- =============================My Page Header & Left-drawer Done====================================================== -->\n");
      out.write("\t\t\n");
      out.write("\t\t\t<main class=\"mdl-layout__content\" >\n");
      out.write(" <!-- =============================My Page Body============================================================ -->\t\t\t\n");
      out.write("\t\t    \t<div class=\"page-content\" >\n");
      out.write("\t\t    \t\t\n");
      out.write("\t    \t\t\t<div class=\"container\" style=\"margin-top:2%; width:100%;\"  >\n");
      out.write("\t    \t\t\t\t<div class=\"row\">\n");
      out.write("\t    \t\t\t\t\t<div class=\"col-sm-12\">\n");
      out.write("<!-- =============================My Page Card============================================================ -->\t\t\t\t\t\t      \n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"demo-card-square mdl-card mdl-shadow--8dp\" style=\"width:100%; height:100%;background-color:#EAECEE;\"  >\n");
      out.write("\t\t\t\t\t\t\t\t\t<!-- <div class=\"mdl-card__title mdl-card--expand\" style=\"height:100px;\">\n");
      out.write("\t\t\t\t\t\t\t\t    \t<h2 class=\"mdl-card__title-text\">Update</h2>\n");
      out.write("\t\t\t\t\t\t\t\t  \t</div> -->\t\n");
      out.write("<!-- =============================My Page Card Body============================================================ -->\t\t\t\t\t\t\t\t  \t\n");
      out.write("\t\t\t\t\t\t\t\t  \t<div class=\"mdl-card__supporting-text\" >\n");
      out.write("\t\t\t\t\t\t\t\t  \t\t<div id=\"dvMap\" style=\"width: 500px; height: 500px\"></div>\n");
      out.write("\t\t\t\t\t\t\t\t  \t</div>\n");
      out.write("<!-- =============================My Page Card Body Done============================================================ -->\n");
      out.write("\t\t\t\t\t\t\t\t  \t\n");
      out.write("<!-- =============================My Page Card Footer============================================================ -->\t\t\t\t\t\t\t\t  \t\n");
      out.write("\t\t\t\t\t\t\t\t  \t\n");
      out.write("\t\t\t\t\t\t\t\t  \t<div class=\"mdl-card__actions mdl-card--border\">\n");
      out.write("\t\t\t\t\t\t\t\t    \t<a class=\"mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect\">\n");
      out.write("\t\t\t\t\t\t\t\t      \t\tView Updates\n");
      out.write("\t\t\t\t\t\t\t\t    \t</a>\n");
      out.write("\t\t\t\t\t\t\t\t  \t</div>\n");
      out.write("\t\t\t\t\t\t\t\t\n");
      out.write("<!-- =============================My Page Card Footer Done============================================================ -->\t\t\t\t\t\t\t\t  \t\n");
      out.write("\t\t\t\t\t\t\t\t  \t\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t\t\n");
      out.write("<!-- =============================My Page Card Done============================================================ -->\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t    </div>\n");
      out.write("\t    \t\t\t\t</div>\n");
      out.write("\t    \t\t\t</div>\n");
      out.write("\t    \t\t</div>\n");
      out.write("<!-- =============================My Page Body Done============================================================ -->\t\t\t    \t\n");
      out.write("\t\t  \t</main>\n");
      out.write("\t\t</div>\n");
      out.write("\t</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("var longicurrent;\n");
      out.write("var laticurrent;\t\n");
      out.write("\t$(document).ready(function() {\n");
      out.write("\t\t\n");
      out.write("\t\tvar markers = new Array();\n");
      out.write("\t    var myLatLng;\n");
      out.write("\t \n");
      out.write("\t    //Find the current location of the user.\n");
      out.write("\t    if (navigator.geolocation) {\n");
      out.write("\t        navigator.geolocation.getCurrentPosition(function (p) {\n");
      out.write("\t            var myLatLng = new google.maps.LatLng(p.coords.latitude, p.coords.longitude);\n");
      out.write("\t            var m = {};\n");
      out.write("\t            m.title = \"Current location\";\n");
      out.write("\t            m.lat = p.coords.latitude;\n");
      out.write("\t            m.lng = p.coords.longitude;\n");
      out.write("\t            m.description = \"<a href='collegeList'>college list</a> your current location\";\n");
      out.write("\t            markers.push(m);\n");
      out.write("\t            //Find specified address location.\n");
      out.write("\t            var address = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ data.address}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\n");
      out.write("\t            var geocoder = new google.maps.Geocoder();\n");
      out.write("\t            geocoder.geocode({ 'address': address }, function (results, status) {\n");
      out.write("\t                if (status == google.maps.GeocoderStatus.OK) {\n");
      out.write("\t                    m = {};\n");
      out.write("\t                    m.title = address;\n");
      out.write("\t                    /* m.lat = results[0].geometry.location.lat();\n");
      out.write("\t                    m.lng = results[0].geometry.location.lng(); */\n");
      out.write("\t                    m.description = \"hiii\";\n");
      out.write("\t                    m.lat = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ data.latitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\n");
      out.write("\t                    m.lng = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ data.longitude}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\n");
      out.write("\t                    \n");
      out.write("\t                    markers.push(m);\n");
      out.write("\t                    var mapOptions = {\n");
      out.write("\t                        center: myLatLng,\n");
      out.write("\t                        zoom: 4,\n");
      out.write("\t                        mapTypeId: google.maps.MapTypeId.ROADMAP\n");
      out.write("\t                    };\n");
      out.write("\t                    var map = new google.maps.Map(document.getElementById(\"dvMap\"), mapOptions);\n");
      out.write("\t                    var infoWindow = new google.maps.InfoWindow();\n");
      out.write("\t                    var lat_lng = new Array();\n");
      out.write("\t                    var latlngbounds = new google.maps.LatLngBounds();\n");
      out.write("\t \n");
      out.write("\t                    for (i = 0; i < markers.length; i++) {\n");
      out.write("\t                        var data = markers[i];\n");
      out.write("\t                        var myLatlng = new google.maps.LatLng(data.lat, data.lng);\n");
      out.write("\t                        lat_lng.push(myLatlng);\n");
      out.write("\t                        var marker = new google.maps.Marker({\n");
      out.write("\t                            position: myLatlng,\n");
      out.write("\t                            map: map,\n");
      out.write("\t                            title: data.title\n");
      out.write("\t                        });\n");
      out.write("\t                        latlngbounds.extend(marker.position);\n");
      out.write("\t                        (function (marker, data) {\n");
      out.write("\t                            google.maps.event.addListener(marker, \"click\", function (e) {\n");
      out.write("\t                                infoWindow.setContent(data.title);\n");
      out.write("\t                                infoWindow.setContent(data.description);\n");
      out.write("\t                                infoWindow.open(map, marker);\n");
      out.write("\t                            });\n");
      out.write("\t                        })(marker, data);\n");
      out.write("\t                    }\n");
      out.write("\t                    map.setCenter(latlngbounds.getCenter());\n");
      out.write("\t                    map.fitBounds(latlngbounds);\n");
      out.write("\t \n");
      out.write("\t                    //***********ROUTING****************//\n");
      out.write("\t \n");
      out.write("\t                    //Initialize the Path Array.\n");
      out.write("\t                    var path = new google.maps.MVCArray();\n");
      out.write("\t \n");
      out.write("\t                    //Initialize the Direction Service.\n");
      out.write("\t                    var service = new google.maps.DirectionsService();\n");
      out.write("\t \n");
      out.write("\t                    //Set the Path Stroke Color.\n");
      out.write("\t                    var poly = new google.maps.Polyline({ map: map, strokeColor: '#4986E7' });\n");
      out.write("\t \n");
      out.write("\t                    //Loop and Draw Path Route between the Points on MAP.\n");
      out.write("\t                    for (var i = 0; i < lat_lng.length; i++) {\n");
      out.write("\t                        if ((i + 1) < lat_lng.length) {\n");
      out.write("\t                            var src = lat_lng[i];\n");
      out.write("\t                            var des = lat_lng[i + 1];\n");
      out.write("\t                            path.push(src);\n");
      out.write("\t                            poly.setPath(path);\n");
      out.write("\t                            service.route({\n");
      out.write("\t                                origin: src,\n");
      out.write("\t                                destination: des,\n");
      out.write("\t                                travelMode: google.maps.DirectionsTravelMode.DRIVING\n");
      out.write("\t                            }, function (result, status) {\n");
      out.write("\t                                if (status == google.maps.DirectionsStatus.OK) {\n");
      out.write("\t                                    for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {\n");
      out.write("\t                                        path.push(result.routes[0].overview_path[i]);\n");
      out.write("\t                                    }\n");
      out.write("\t                                } else {\n");
      out.write("\t                                    //If the location specified is invalid, show error.\n");
      out.write("\t                                    alert(\"Invalid location for plotting route.\");\n");
      out.write("\t                                    window.location.href = window.location.href;\n");
      out.write("\t                                }\n");
      out.write("\t                            });\n");
      out.write("\t                        }\n");
      out.write("\t                    }\n");
      out.write("\t                } else {\n");
      out.write("\t                    alert(\"Request failed.\")\n");
      out.write("\t                }\n");
      out.write("\t            });\n");
      out.write("\t \n");
      out.write("\t        });\n");
      out.write("\t    }\n");
      out.write("\t    else {\n");
      out.write("\t        alert('Geo Location feature is not supported in this browser.');\n");
      out.write("\t        return;\n");
      out.write("\t    }\n");
      out.write("\t\t\n");
      out.write("\t    } );\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\"> \n");
      out.write("/* var map;\n");
      out.write("var marker;\n");
      out.write("var myLatlng = new google.maps.LatLng(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ data.latitude }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write('"');
      out.write(',');
      out.write('"');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ data.longitude }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\");\n");
      out.write("var geocoder = new google.maps.Geocoder();\n");
      out.write("var infowindow = new google.maps.InfoWindow();\n");
      out.write("function initialize(){\n");
      out.write("var mapOptions = {\n");
      out.write("zoom: 10,\n");
      out.write("center: myLatlng,\n");
      out.write("mapTypeId: google.maps.MapTypeId.ROADMAP\n");
      out.write("};\n");
      out.write("\n");
      out.write("map = new google.maps.Map(document.getElementById(\"myMap\"), mapOptions);\n");
      out.write("\n");
      out.write("marker = new google.maps.Marker({\n");
      out.write("map: map,\n");
      out.write("position: myLatlng,\n");
      out.write("draggable: true \n");
      out.write("}); \n");
      out.write("\n");
      out.write("geocoder.geocode({'latLng': myLatlng }, function(results, status) {\n");
      out.write("if (status == google.maps.GeocoderStatus.OK) {\n");
      out.write("if (results[0]) {\n");
      out.write("$('#latitude,#longitude').show();\n");
      out.write("$('#address').val(results[0].formatted_address);\n");
      out.write("$('#latitude').val(marker.getPosition().lat());\n");
      out.write("$('#longitude').val(marker.getPosition().lng());\n");
      out.write("infowindow.setContent(\"<a href='collegeList'>college list</a> \"+results[0].formatted_address);\n");
      out.write("infowindow.open(map, marker);\n");
      out.write("}\n");
      out.write("}\n");
      out.write("});\n");
      out.write("\n");
      out.write("google.maps.event.addListener(marker, 'dragend', function() {\n");
      out.write("\n");
      out.write("geocoder.geocode({'latLng': marker.getPosition()}, function(results, status) {\n");
      out.write("if (status == google.maps.GeocoderStatus.OK) {\n");
      out.write("if (results[0]) {\n");
      out.write("$('#address').val(results[0].formatted_address);\n");
      out.write("$('#latitude').val(marker.getPosition().lat());\n");
      out.write("$('#longitude').val(marker.getPosition().lng());\n");
      out.write("infowindow.setContent(results[0].formatted_address);\n");
      out.write("infowindow.open(map, marker);\n");
      out.write("}\n");
      out.write("}\n");
      out.write("});\n");
      out.write("});\n");
      out.write("\n");
      out.write("}\n");
      out.write("google.maps.event.addDomListener(window, 'load', initialize); */\n");
      out.write("</script>\n");
      out.write("<script>\n");
      out.write("       window.onload = function () {\n");
      out.write("    \t\n");
      out.write("    \t   \n");
      out.write("       }\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
